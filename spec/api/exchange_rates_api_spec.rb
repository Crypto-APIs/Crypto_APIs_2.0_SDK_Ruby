=begin
#CryptoAPIs

#Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

The version of the OpenAPI document: 2.0.0
Contact: developers@cryptoapis.io
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.1-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for CryptoApis::ExchangeRatesApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'ExchangeRatesApi' do
  before do
    # run before each test
    @api_instance = CryptoApis::ExchangeRatesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ExchangeRatesApi' do
    it 'should create an instance of ExchangeRatesApi' do
      expect(@api_instance).to be_instance_of(CryptoApis::ExchangeRatesApi)
    end
  end

  # unit tests for get_exchange_rate_by_asset_symbols
  # Get Exchange Rate By Asset Symbols
  # Through this endpoint customers can obtain exchange rates by asset symbols. The process represents the exchange rate value of a single unit of one asset versus another one. Data is provided per unique asset symbol.
  # @param from_asset_symbol Defines the base asset symbol to get a rate for.
  # @param to_asset_symbol Defines the relation asset symbol in which the base asset rate will be displayed.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user.
  # @option opts [Integer] :calculation_timestamp Defines the time of the market data used to calculate the exchange rate in UNIX Timestamp.
  # @return [GetExchangeRateByAssetSymbolsR]
  describe 'get_exchange_rate_by_asset_symbols test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_exchange_rate_by_assets_ids
  # Get Exchange Rate By Assets IDs
  # Through this endpoint customers can obtain exchange rates by asset IDs. The process represents the exchange rate value of a single unit of one asset versus another one. Data is provided per unique asset Reference ID.
  # @param from_asset_id Defines the base asset Reference ID to get a rate for.
  # @param to_asset_id Defines the relation asset Reference ID in which the base asset rate will be displayed.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user.
  # @option opts [Integer] :calculation_timestamp Defines the time of the market data used to calculate the exchange rate in UNIX Timestamp.
  # @return [GetExchangeRateByAssetsIDsR]
  describe 'get_exchange_rate_by_assets_ids test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
