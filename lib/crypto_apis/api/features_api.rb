=begin
#CryptoAPIs

#Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

The version of the OpenAPI document: 2.0.0
Contact: developers@cryptoapis.io
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.0-SNAPSHOT

=end

require 'cgi'

module CryptoApis
  class FeaturesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Broadcast Locally Signed Transaction
    # Through this endpoint customers can broadcast transactions that have been already signed locally. Instead of using a node for broadcasting a signed transaction users can use this endpoint. We then keep the user posted about the status by sending you a callback with a success or failure status.    {warning}This can be prepared and signed **only** locally, not through the API. We can provide support only for the process of broadcasting.{/warning}
    # @param blockchain [String] Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.
    # @param network [String] Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user.
    # @option opts [BroadcastLocallySignedTransactionRB] :broadcast_locally_signed_transaction_rb 
    # @return [BroadcastLocallySignedTransactionR]
    def broadcast_locally_signed_transaction(blockchain, network, opts = {})
      data, _status_code, _headers = broadcast_locally_signed_transaction_with_http_info(blockchain, network, opts)
      data
    end

    # Broadcast Locally Signed Transaction
    # Through this endpoint customers can broadcast transactions that have been already signed locally. Instead of using a node for broadcasting a signed transaction users can use this endpoint. We then keep the user posted about the status by sending you a callback with a success or failure status.    {warning}This can be prepared and signed **only** locally, not through the API. We can provide support only for the process of broadcasting.{/warning}
    # @param blockchain [String] Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.
    # @param network [String] Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user.
    # @option opts [BroadcastLocallySignedTransactionRB] :broadcast_locally_signed_transaction_rb 
    # @return [Array<(BroadcastLocallySignedTransactionR, Integer, Hash)>] BroadcastLocallySignedTransactionR data, response status code and response headers
    def broadcast_locally_signed_transaction_with_http_info(blockchain, network, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeaturesApi.broadcast_locally_signed_transaction ...'
      end
      # verify the required parameter 'blockchain' is set
      if @api_client.config.client_side_validation && blockchain.nil?
        fail ArgumentError, "Missing the required parameter 'blockchain' when calling FeaturesApi.broadcast_locally_signed_transaction"
      end
      # verify enum value
      allowable_values = ["bitcoin", "bitcoin-cash", "litecoin", "dogecoin", "dash", "ethereum", "ethereum-classic", "zcash", "binance-smart-chain", "xrp"]
      if @api_client.config.client_side_validation && !allowable_values.include?(blockchain)
        fail ArgumentError, "invalid value for \"blockchain\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'network' is set
      if @api_client.config.client_side_validation && network.nil?
        fail ArgumentError, "Missing the required parameter 'network' when calling FeaturesApi.broadcast_locally_signed_transaction"
      end
      # verify enum value
      allowable_values = ["mainnet", "testnet", "ropsten", "mordor"]
      if @api_client.config.client_side_validation && !allowable_values.include?(network)
        fail ArgumentError, "invalid value for \"network\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/blockchain-tools/{blockchain}/{network}/transactions/broadcast'.sub('{' + 'blockchain' + '}', CGI.escape(blockchain.to_s)).sub('{' + 'network' + '}', CGI.escape(network.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'context'] = opts[:'context'] if !opts[:'context'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'broadcast_locally_signed_transaction_rb'])

      # return_type
      return_type = opts[:debug_return_type] || 'BroadcastLocallySignedTransactionR'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey']

      new_options = opts.merge(
        :operation => :"FeaturesApi.broadcast_locally_signed_transaction",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeaturesApi#broadcast_locally_signed_transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Decode Raw Transaction Hex
    # Through this endpoint customers can decode a raw transaction hex and see the decoded transactions' details.
    # @param blockchain [String] Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.
    # @param network [String] Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user.
    # @option opts [DecodeRawTransactionHexRB] :decode_raw_transaction_hex_rb 
    # @return [DecodeRawTransactionHexR]
    def decode_raw_transaction_hex(blockchain, network, opts = {})
      data, _status_code, _headers = decode_raw_transaction_hex_with_http_info(blockchain, network, opts)
      data
    end

    # Decode Raw Transaction Hex
    # Through this endpoint customers can decode a raw transaction hex and see the decoded transactions&#39; details.
    # @param blockchain [String] Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.
    # @param network [String] Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user.
    # @option opts [DecodeRawTransactionHexRB] :decode_raw_transaction_hex_rb 
    # @return [Array<(DecodeRawTransactionHexR, Integer, Hash)>] DecodeRawTransactionHexR data, response status code and response headers
    def decode_raw_transaction_hex_with_http_info(blockchain, network, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeaturesApi.decode_raw_transaction_hex ...'
      end
      # verify the required parameter 'blockchain' is set
      if @api_client.config.client_side_validation && blockchain.nil?
        fail ArgumentError, "Missing the required parameter 'blockchain' when calling FeaturesApi.decode_raw_transaction_hex"
      end
      # verify enum value
      allowable_values = ["bitcoin", "bitcoin-cash", "litecoin", "dogecoin", "dash", "ethereum", "ethereum-classic", "binance-smart-chain", "zcash"]
      if @api_client.config.client_side_validation && !allowable_values.include?(blockchain)
        fail ArgumentError, "invalid value for \"blockchain\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'network' is set
      if @api_client.config.client_side_validation && network.nil?
        fail ArgumentError, "Missing the required parameter 'network' when calling FeaturesApi.decode_raw_transaction_hex"
      end
      # verify enum value
      allowable_values = ["mainnet", "testnet", "ropsten", "mordor"]
      if @api_client.config.client_side_validation && !allowable_values.include?(network)
        fail ArgumentError, "invalid value for \"network\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/blockchain-tools/{blockchain}/{network}/decode-raw-transaction'.sub('{' + 'blockchain' + '}', CGI.escape(blockchain.to_s)).sub('{' + 'network' + '}', CGI.escape(network.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'context'] = opts[:'context'] if !opts[:'context'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'decode_raw_transaction_hex_rb'])

      # return_type
      return_type = opts[:debug_return_type] || 'DecodeRawTransactionHexR'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey']

      new_options = opts.merge(
        :operation => :"FeaturesApi.decode_raw_transaction_hex",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeaturesApi#decode_raw_transaction_hex\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Decode X-Address
    # Through this endpoint, customers can decode an encoded XRP address with tag, by providing the specific x-address. The response includes the decoded classic address and the tag.
    # @param blockchain [String] Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.
    # @param network [String] Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.
    # @param x_address [String] Represents the encoded classic address with its destination tag.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user.
    # @return [DecodeXAddressR]
    def decode_x_address(blockchain, network, x_address, opts = {})
      data, _status_code, _headers = decode_x_address_with_http_info(blockchain, network, x_address, opts)
      data
    end

    # Decode X-Address
    # Through this endpoint, customers can decode an encoded XRP address with tag, by providing the specific x-address. The response includes the decoded classic address and the tag.
    # @param blockchain [String] Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.
    # @param network [String] Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.
    # @param x_address [String] Represents the encoded classic address with its destination tag.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user.
    # @return [Array<(DecodeXAddressR, Integer, Hash)>] DecodeXAddressR data, response status code and response headers
    def decode_x_address_with_http_info(blockchain, network, x_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeaturesApi.decode_x_address ...'
      end
      # verify the required parameter 'blockchain' is set
      if @api_client.config.client_side_validation && blockchain.nil?
        fail ArgumentError, "Missing the required parameter 'blockchain' when calling FeaturesApi.decode_x_address"
      end
      # verify enum value
      allowable_values = ["xrp"]
      if @api_client.config.client_side_validation && !allowable_values.include?(blockchain)
        fail ArgumentError, "invalid value for \"blockchain\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'network' is set
      if @api_client.config.client_side_validation && network.nil?
        fail ArgumentError, "Missing the required parameter 'network' when calling FeaturesApi.decode_x_address"
      end
      # verify enum value
      allowable_values = ["mainnet", "testnet"]
      if @api_client.config.client_side_validation && !allowable_values.include?(network)
        fail ArgumentError, "invalid value for \"network\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'x_address' is set
      if @api_client.config.client_side_validation && x_address.nil?
        fail ArgumentError, "Missing the required parameter 'x_address' when calling FeaturesApi.decode_x_address"
      end
      # resource path
      local_var_path = '/blockchain-tools/{blockchain}/{network}/decode-x-address/{xAddress}'.sub('{' + 'blockchain' + '}', CGI.escape(blockchain.to_s)).sub('{' + 'network' + '}', CGI.escape(network.to_s)).sub('{' + 'xAddress' + '}', CGI.escape(x_address.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'context'] = opts[:'context'] if !opts[:'context'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DecodeXAddressR'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey']

      new_options = opts.merge(
        :operation => :"FeaturesApi.decode_x_address",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeaturesApi#decode_x_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Derive HD Wallet (xPub, yPub, zPub) Change Or Receiving Addresses
    # Through this endpoint, customers can derive up to 10 addresses - both change and receive, from a certain HD Wallet (xPub, yPub, zPub), by providing an extended public key. By default the system creates a receiving/deposit address, unless the isChange attribute is set to 'true'. In that case the system derives a 'change' address. The change address can be derived only for UTXO based blockchains, for all the rest, this endpoint always creates a deposit/receiving address.
    # @param blockchain [String] Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.
    # @param extended_public_key [String] Defines the account extended publicly known key which is used to derive all child public keys.
    # @param network [String] Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user.
    # @option opts [String] :address_format Represents the format of the address.
    # @option opts [Integer] :addresses_count Represents the addresses count.
    # @option opts [Boolean] :is_change Defines if the specific address is a change or deposit address. If the value is True - it is a change address, if it is False - it is a Deposit address.
    # @option opts [Integer] :start_index The starting index of the response items, i.e. where the response should start listing the returned items.
    # @return [DeriveHDWalletXPubYPubZPubChangeOrReceivingAddressesR]
    def derive_hd_wallet__x_pub_y_pub_z_pub_change_or_receiving_addresses(blockchain, extended_public_key, network, opts = {})
      data, _status_code, _headers = derive_hd_wallet__x_pub_y_pub_z_pub_change_or_receiving_addresses_with_http_info(blockchain, extended_public_key, network, opts)
      data
    end

    # Derive HD Wallet (xPub, yPub, zPub) Change Or Receiving Addresses
    # Through this endpoint, customers can derive up to 10 addresses - both change and receive, from a certain HD Wallet (xPub, yPub, zPub), by providing an extended public key. By default the system creates a receiving/deposit address, unless the isChange attribute is set to &#39;true&#39;. In that case the system derives a &#39;change&#39; address. The change address can be derived only for UTXO based blockchains, for all the rest, this endpoint always creates a deposit/receiving address.
    # @param blockchain [String] Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.
    # @param extended_public_key [String] Defines the account extended publicly known key which is used to derive all child public keys.
    # @param network [String] Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user.
    # @option opts [String] :address_format Represents the format of the address.
    # @option opts [Integer] :addresses_count Represents the addresses count.
    # @option opts [Boolean] :is_change Defines if the specific address is a change or deposit address. If the value is True - it is a change address, if it is False - it is a Deposit address.
    # @option opts [Integer] :start_index The starting index of the response items, i.e. where the response should start listing the returned items.
    # @return [Array<(DeriveHDWalletXPubYPubZPubChangeOrReceivingAddressesR, Integer, Hash)>] DeriveHDWalletXPubYPubZPubChangeOrReceivingAddressesR data, response status code and response headers
    def derive_hd_wallet__x_pub_y_pub_z_pub_change_or_receiving_addresses_with_http_info(blockchain, extended_public_key, network, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeaturesApi.derive_hd_wallet__x_pub_y_pub_z_pub_change_or_receiving_addresses ...'
      end
      # verify the required parameter 'blockchain' is set
      if @api_client.config.client_side_validation && blockchain.nil?
        fail ArgumentError, "Missing the required parameter 'blockchain' when calling FeaturesApi.derive_hd_wallet__x_pub_y_pub_z_pub_change_or_receiving_addresses"
      end
      # verify enum value
      allowable_values = ["bitcoin", "bitcoin-cash", "litecoin", "dogecoin", "dash", "ethereum", "ethereum-classic", "xrp", "binance-smart-chain", "zcash"]
      if @api_client.config.client_side_validation && !allowable_values.include?(blockchain)
        fail ArgumentError, "invalid value for \"blockchain\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'extended_public_key' is set
      if @api_client.config.client_side_validation && extended_public_key.nil?
        fail ArgumentError, "Missing the required parameter 'extended_public_key' when calling FeaturesApi.derive_hd_wallet__x_pub_y_pub_z_pub_change_or_receiving_addresses"
      end
      # verify the required parameter 'network' is set
      if @api_client.config.client_side_validation && network.nil?
        fail ArgumentError, "Missing the required parameter 'network' when calling FeaturesApi.derive_hd_wallet__x_pub_y_pub_z_pub_change_or_receiving_addresses"
      end
      # verify enum value
      allowable_values = ["mainnet", "testnet", "ropsten", "mordor"]
      if @api_client.config.client_side_validation && !allowable_values.include?(network)
        fail ArgumentError, "invalid value for \"network\", must be one of #{allowable_values}"
      end
      allowable_values = ["p2pkh", "p2sh", "p2wpkh", "standard", "p2sh-cash", "p2pkh-cash", "classic"]
      if @api_client.config.client_side_validation && opts[:'address_format'] && !allowable_values.include?(opts[:'address_format'])
        fail ArgumentError, "invalid value for \"address_format\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/blockchain-tools/{blockchain}/{network}/hd/{extendedPublicKey}/addresses/derive-address'.sub('{' + 'blockchain' + '}', CGI.escape(blockchain.to_s)).sub('{' + 'extendedPublicKey' + '}', CGI.escape(extended_public_key.to_s)).sub('{' + 'network' + '}', CGI.escape(network.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'context'] = opts[:'context'] if !opts[:'context'].nil?
      query_params[:'addressFormat'] = opts[:'address_format'] if !opts[:'address_format'].nil?
      query_params[:'addressesCount'] = opts[:'addresses_count'] if !opts[:'addresses_count'].nil?
      query_params[:'isChange'] = opts[:'is_change'] if !opts[:'is_change'].nil?
      query_params[:'startIndex'] = opts[:'start_index'] if !opts[:'start_index'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeriveHDWalletXPubYPubZPubChangeOrReceivingAddressesR'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey']

      new_options = opts.merge(
        :operation => :"FeaturesApi.derive_hd_wallet__x_pub_y_pub_z_pub_change_or_receiving_addresses",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeaturesApi#derive_hd_wallet__x_pub_y_pub_z_pub_change_or_receiving_addresses\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Encode X-Address
    # Through this endpoint, customers can encode an encoded XRP address with tag, by providing the specific x-address. The response includes the encoded classic address and the tag.
    # @param address_tag [Integer] Defines a specific Tag that is an additional XRP address feature. It helps identifying a transaction recipient beyond a wallet address.
    # @param blockchain [String] Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.
    # @param classic_address [String] Represents the public address, which is a compressed and shortened form of a public key.
    # @param network [String] Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user.
    # @return [EncodeXAddressR]
    def encode_x_address(address_tag, blockchain, classic_address, network, opts = {})
      data, _status_code, _headers = encode_x_address_with_http_info(address_tag, blockchain, classic_address, network, opts)
      data
    end

    # Encode X-Address
    # Through this endpoint, customers can encode an encoded XRP address with tag, by providing the specific x-address. The response includes the encoded classic address and the tag.
    # @param address_tag [Integer] Defines a specific Tag that is an additional XRP address feature. It helps identifying a transaction recipient beyond a wallet address.
    # @param blockchain [String] Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.
    # @param classic_address [String] Represents the public address, which is a compressed and shortened form of a public key.
    # @param network [String] Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user.
    # @return [Array<(EncodeXAddressR, Integer, Hash)>] EncodeXAddressR data, response status code and response headers
    def encode_x_address_with_http_info(address_tag, blockchain, classic_address, network, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeaturesApi.encode_x_address ...'
      end
      # verify the required parameter 'address_tag' is set
      if @api_client.config.client_side_validation && address_tag.nil?
        fail ArgumentError, "Missing the required parameter 'address_tag' when calling FeaturesApi.encode_x_address"
      end
      # verify the required parameter 'blockchain' is set
      if @api_client.config.client_side_validation && blockchain.nil?
        fail ArgumentError, "Missing the required parameter 'blockchain' when calling FeaturesApi.encode_x_address"
      end
      # verify enum value
      allowable_values = ["xrp"]
      if @api_client.config.client_side_validation && !allowable_values.include?(blockchain)
        fail ArgumentError, "invalid value for \"blockchain\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'classic_address' is set
      if @api_client.config.client_side_validation && classic_address.nil?
        fail ArgumentError, "Missing the required parameter 'classic_address' when calling FeaturesApi.encode_x_address"
      end
      # verify the required parameter 'network' is set
      if @api_client.config.client_side_validation && network.nil?
        fail ArgumentError, "Missing the required parameter 'network' when calling FeaturesApi.encode_x_address"
      end
      # verify enum value
      allowable_values = ["mainnet", "testnet"]
      if @api_client.config.client_side_validation && !allowable_values.include?(network)
        fail ArgumentError, "invalid value for \"network\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/blockchain-tools/{blockchain}/{network}/encode-x-address/{classicAddress}/{addressTag}'.sub('{' + 'addressTag' + '}', CGI.escape(address_tag.to_s)).sub('{' + 'blockchain' + '}', CGI.escape(blockchain.to_s)).sub('{' + 'classicAddress' + '}', CGI.escape(classic_address.to_s)).sub('{' + 'network' + '}', CGI.escape(network.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'context'] = opts[:'context'] if !opts[:'context'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EncodeXAddressR'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey']

      new_options = opts.merge(
        :operation => :"FeaturesApi.encode_x_address",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeaturesApi#encode_x_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Estimate Gas Limit
    # This endpoint helps customer in estimating the gas limit needed for a transaction. It gives information for gas expenses when sending ether to contracts or making a transaction with additional data in it.
    # @param blockchain [String] Represents the specific blockchain protocol name, e.g. Ethereum.
    # @param network [String] Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user.
    # @option opts [EstimateGasLimitRB] :estimate_gas_limit_rb 
    # @return [EstimateGasLimitR]
    def estimate_gas_limit(blockchain, network, opts = {})
      data, _status_code, _headers = estimate_gas_limit_with_http_info(blockchain, network, opts)
      data
    end

    # Estimate Gas Limit
    # This endpoint helps customer in estimating the gas limit needed for a transaction. It gives information for gas expenses when sending ether to contracts or making a transaction with additional data in it.
    # @param blockchain [String] Represents the specific blockchain protocol name, e.g. Ethereum.
    # @param network [String] Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user.
    # @option opts [EstimateGasLimitRB] :estimate_gas_limit_rb 
    # @return [Array<(EstimateGasLimitR, Integer, Hash)>] EstimateGasLimitR data, response status code and response headers
    def estimate_gas_limit_with_http_info(blockchain, network, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeaturesApi.estimate_gas_limit ...'
      end
      # verify the required parameter 'blockchain' is set
      if @api_client.config.client_side_validation && blockchain.nil?
        fail ArgumentError, "Missing the required parameter 'blockchain' when calling FeaturesApi.estimate_gas_limit"
      end
      # verify enum value
      allowable_values = ["ethereum", "ethereum-classic", "binance-smart-chain"]
      if @api_client.config.client_side_validation && !allowable_values.include?(blockchain)
        fail ArgumentError, "invalid value for \"blockchain\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'network' is set
      if @api_client.config.client_side_validation && network.nil?
        fail ArgumentError, "Missing the required parameter 'network' when calling FeaturesApi.estimate_gas_limit"
      end
      # verify enum value
      allowable_values = ["ropsten", "mainnet", "mordor", "testnet"]
      if @api_client.config.client_side_validation && !allowable_values.include?(network)
        fail ArgumentError, "invalid value for \"network\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/blockchain-tools/{blockchain}/{network}/gas-limit'.sub('{' + 'blockchain' + '}', CGI.escape(blockchain.to_s)).sub('{' + 'network' + '}', CGI.escape(network.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'context'] = opts[:'context'] if !opts[:'context'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'estimate_gas_limit_rb'])

      # return_type
      return_type = opts[:debug_return_type] || 'EstimateGasLimitR'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey']

      new_options = opts.merge(
        :operation => :"FeaturesApi.estimate_gas_limit",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeaturesApi#estimate_gas_limit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Estimate Token Gas Limit
    # This endpoint helps customer in estimating the Contract Gas Limit needed for a transaction. It gives information for gas expenses for a specific contract when sending ethers or making a transaction with additional data in it.
    # @param blockchain [String] Represents the specific blockchain protocol name, e.g. Ethereum.
    # @param network [String] Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user.
    # @option opts [EstimateTokenGasLimitRB] :estimate_token_gas_limit_rb 
    # @return [EstimateTokenGasLimitR]
    def estimate_token_gas_limit(blockchain, network, opts = {})
      data, _status_code, _headers = estimate_token_gas_limit_with_http_info(blockchain, network, opts)
      data
    end

    # Estimate Token Gas Limit
    # This endpoint helps customer in estimating the Contract Gas Limit needed for a transaction. It gives information for gas expenses for a specific contract when sending ethers or making a transaction with additional data in it.
    # @param blockchain [String] Represents the specific blockchain protocol name, e.g. Ethereum.
    # @param network [String] Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user.
    # @option opts [EstimateTokenGasLimitRB] :estimate_token_gas_limit_rb 
    # @return [Array<(EstimateTokenGasLimitR, Integer, Hash)>] EstimateTokenGasLimitR data, response status code and response headers
    def estimate_token_gas_limit_with_http_info(blockchain, network, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeaturesApi.estimate_token_gas_limit ...'
      end
      # verify the required parameter 'blockchain' is set
      if @api_client.config.client_side_validation && blockchain.nil?
        fail ArgumentError, "Missing the required parameter 'blockchain' when calling FeaturesApi.estimate_token_gas_limit"
      end
      # verify enum value
      allowable_values = ["ethereum", "ethereum-classic", "binance-smart-chain"]
      if @api_client.config.client_side_validation && !allowable_values.include?(blockchain)
        fail ArgumentError, "invalid value for \"blockchain\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'network' is set
      if @api_client.config.client_side_validation && network.nil?
        fail ArgumentError, "Missing the required parameter 'network' when calling FeaturesApi.estimate_token_gas_limit"
      end
      # verify enum value
      allowable_values = ["ropsten", "mainnet", "mordor", "testnet"]
      if @api_client.config.client_side_validation && !allowable_values.include?(network)
        fail ArgumentError, "invalid value for \"network\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/blockchain-tools/{blockchain}/{network}/gas-limit/contract'.sub('{' + 'blockchain' + '}', CGI.escape(blockchain.to_s)).sub('{' + 'network' + '}', CGI.escape(network.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'context'] = opts[:'context'] if !opts[:'context'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'estimate_token_gas_limit_rb'])

      # return_type
      return_type = opts[:debug_return_type] || 'EstimateTokenGasLimitR'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey']

      new_options = opts.merge(
        :operation => :"FeaturesApi.estimate_token_gas_limit",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeaturesApi#estimate_token_gas_limit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get EIP 1559 Fee Recommendations
    # Through this endpoint customers can obtain fee recommendations specifically for EIP 1559.
    # @param network [String] Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.
    # @param blockchain [String] Represents the specific blockchain protocol name, e.g. Ethereum.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user.
    # @return [GetEIP1559FeeRecommendationsR]
    def get_eip_1559_fee_recommendations(network, blockchain, opts = {})
      data, _status_code, _headers = get_eip_1559_fee_recommendations_with_http_info(network, blockchain, opts)
      data
    end

    # Get EIP 1559 Fee Recommendations
    # Through this endpoint customers can obtain fee recommendations specifically for EIP 1559.
    # @param network [String] Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.
    # @param blockchain [String] Represents the specific blockchain protocol name, e.g. Ethereum.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user.
    # @return [Array<(GetEIP1559FeeRecommendationsR, Integer, Hash)>] GetEIP1559FeeRecommendationsR data, response status code and response headers
    def get_eip_1559_fee_recommendations_with_http_info(network, blockchain, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeaturesApi.get_eip_1559_fee_recommendations ...'
      end
      # verify the required parameter 'network' is set
      if @api_client.config.client_side_validation && network.nil?
        fail ArgumentError, "Missing the required parameter 'network' when calling FeaturesApi.get_eip_1559_fee_recommendations"
      end
      # verify enum value
      allowable_values = ["mainnet", "ropsten"]
      if @api_client.config.client_side_validation && !allowable_values.include?(network)
        fail ArgumentError, "invalid value for \"network\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'blockchain' is set
      if @api_client.config.client_side_validation && blockchain.nil?
        fail ArgumentError, "Missing the required parameter 'blockchain' when calling FeaturesApi.get_eip_1559_fee_recommendations"
      end
      # verify enum value
      allowable_values = ["ethereum"]
      if @api_client.config.client_side_validation && !allowable_values.include?(blockchain)
        fail ArgumentError, "invalid value for \"blockchain\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/blockchain-tools/{blockchain}/{network}/fees/eip1559'.sub('{' + 'network' + '}', CGI.escape(network.to_s)).sub('{' + 'blockchain' + '}', CGI.escape(blockchain.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'context'] = opts[:'context'] if !opts[:'context'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetEIP1559FeeRecommendationsR'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey']

      new_options = opts.merge(
        :operation => :"FeaturesApi.get_eip_1559_fee_recommendations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeaturesApi#get_eip_1559_fee_recommendations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Validate Address
    # This endpoint checks user public addresses whether they are valid or not.
    # @param blockchain [String] Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.
    # @param network [String] Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user.
    # @option opts [ValidateAddressRB] :validate_address_rb 
    # @return [ValidateAddressR]
    def validate_address(blockchain, network, opts = {})
      data, _status_code, _headers = validate_address_with_http_info(blockchain, network, opts)
      data
    end

    # Validate Address
    # This endpoint checks user public addresses whether they are valid or not.
    # @param blockchain [String] Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.
    # @param network [String] Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user.
    # @option opts [ValidateAddressRB] :validate_address_rb 
    # @return [Array<(ValidateAddressR, Integer, Hash)>] ValidateAddressR data, response status code and response headers
    def validate_address_with_http_info(blockchain, network, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeaturesApi.validate_address ...'
      end
      # verify the required parameter 'blockchain' is set
      if @api_client.config.client_side_validation && blockchain.nil?
        fail ArgumentError, "Missing the required parameter 'blockchain' when calling FeaturesApi.validate_address"
      end
      # verify enum value
      allowable_values = ["bitcoin", "bitcoin-cash", "litecoin", "dogecoin", "dash", "ethereum", "ethereum-classic", "xrp", "zilliqa", "binance-smart-chain", "zcash"]
      if @api_client.config.client_side_validation && !allowable_values.include?(blockchain)
        fail ArgumentError, "invalid value for \"blockchain\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'network' is set
      if @api_client.config.client_side_validation && network.nil?
        fail ArgumentError, "Missing the required parameter 'network' when calling FeaturesApi.validate_address"
      end
      # verify enum value
      allowable_values = ["mainnet", "testnet", "ropsten", "mordor"]
      if @api_client.config.client_side_validation && !allowable_values.include?(network)
        fail ArgumentError, "invalid value for \"network\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/blockchain-tools/{blockchain}/{network}/addresses/validate'.sub('{' + 'blockchain' + '}', CGI.escape(blockchain.to_s)).sub('{' + 'network' + '}', CGI.escape(network.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'context'] = opts[:'context'] if !opts[:'context'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'validate_address_rb'])

      # return_type
      return_type = opts[:debug_return_type] || 'ValidateAddressR'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey']

      new_options = opts.merge(
        :operation => :"FeaturesApi.validate_address",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeaturesApi#validate_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
