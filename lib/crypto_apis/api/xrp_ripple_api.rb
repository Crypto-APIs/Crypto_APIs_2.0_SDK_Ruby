=begin
#CryptoAPIs

#Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.

The version of the OpenAPI document: 2.0.0
Contact: developers@cryptoapis.io
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.1-SNAPSHOT

=end

require 'cgi'

module CryptoApis
  class XRPRippleApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get Latest Mined XRP (Ripple) Block
    # Through this endpoint customers can fetch the last mined XRP block in the blockchain, along with its details. These could include the hash of the specific, the previous and the next block, its transactions count, its height, etc.     Since XRP is a different blockchain than Bitcoin and Ethereum, it isn't unified.
    # @param network [String] Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot;, \&quot;rinkeby\&quot; are test networks.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user.
    # @return [GetLatestMinedXRPRippleBlockR]
    def get_latest_mined_xrp__ripple_block(network, opts = {})
      data, _status_code, _headers = get_latest_mined_xrp__ripple_block_with_http_info(network, opts)
      data
    end

    # Get Latest Mined XRP (Ripple) Block
    # Through this endpoint customers can fetch the last mined XRP block in the blockchain, along with its details. These could include the hash of the specific, the previous and the next block, its transactions count, its height, etc.     Since XRP is a different blockchain than Bitcoin and Ethereum, it isn&#39;t unified.
    # @param network [String] Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot;, \&quot;rinkeby\&quot; are test networks.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user.
    # @return [Array<(GetLatestMinedXRPRippleBlockR, Integer, Hash)>] GetLatestMinedXRPRippleBlockR data, response status code and response headers
    def get_latest_mined_xrp__ripple_block_with_http_info(network, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: XRPRippleApi.get_latest_mined_xrp__ripple_block ...'
      end
      # verify the required parameter 'network' is set
      if @api_client.config.client_side_validation && network.nil?
        fail ArgumentError, "Missing the required parameter 'network' when calling XRPRippleApi.get_latest_mined_xrp__ripple_block"
      end
      # verify enum value
      allowable_values = ["mainnet", "testnet"]
      if @api_client.config.client_side_validation && !allowable_values.include?(network)
        fail ArgumentError, "invalid value for \"network\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/blockchain-data/xrp-specific/{network}/blocks/last'.sub('{' + 'network' + '}', CGI.escape(network.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'context'] = opts[:'context'] if !opts[:'context'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetLatestMinedXRPRippleBlockR'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey']

      new_options = opts.merge(
        :operation => :"XRPRippleApi.get_latest_mined_xrp__ripple_block",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: XRPRippleApi#get_latest_mined_xrp__ripple_block\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get XRP (Ripple) Address Details
    # Through this endpoint the customer can receive basic information about a given XRP address based on confirmed/synced blocks only. In the case where there are any incoming or outgoing **unconfirmed** transactions for the specific address, they **will not** be counted or calculated here.    Since XRP is a different blockchain than Bitcoin and Ethereum, it isn't unified.
    # @param network [String] Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;,  are test networks.
    # @param address [String] Represents the public address, which is a compressed and shortened form of a public key.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user.
    # @return [GetXRPRippleAddressDetailsR]
    def get_xrp__ripple_address_details(network, address, opts = {})
      data, _status_code, _headers = get_xrp__ripple_address_details_with_http_info(network, address, opts)
      data
    end

    # Get XRP (Ripple) Address Details
    # Through this endpoint the customer can receive basic information about a given XRP address based on confirmed/synced blocks only. In the case where there are any incoming or outgoing **unconfirmed** transactions for the specific address, they **will not** be counted or calculated here.    Since XRP is a different blockchain than Bitcoin and Ethereum, it isn&#39;t unified.
    # @param network [String] Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;,  are test networks.
    # @param address [String] Represents the public address, which is a compressed and shortened form of a public key.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user.
    # @return [Array<(GetXRPRippleAddressDetailsR, Integer, Hash)>] GetXRPRippleAddressDetailsR data, response status code and response headers
    def get_xrp__ripple_address_details_with_http_info(network, address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: XRPRippleApi.get_xrp__ripple_address_details ...'
      end
      # verify the required parameter 'network' is set
      if @api_client.config.client_side_validation && network.nil?
        fail ArgumentError, "Missing the required parameter 'network' when calling XRPRippleApi.get_xrp__ripple_address_details"
      end
      # verify enum value
      allowable_values = ["mainnet", "testnet"]
      if @api_client.config.client_side_validation && !allowable_values.include?(network)
        fail ArgumentError, "invalid value for \"network\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'address' is set
      if @api_client.config.client_side_validation && address.nil?
        fail ArgumentError, "Missing the required parameter 'address' when calling XRPRippleApi.get_xrp__ripple_address_details"
      end
      # resource path
      local_var_path = '/blockchain-data/xrp-specific/{network}/addresses/{address}'.sub('{' + 'network' + '}', CGI.escape(network.to_s)).sub('{' + 'address' + '}', CGI.escape(address.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'context'] = opts[:'context'] if !opts[:'context'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetXRPRippleAddressDetailsR'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey']

      new_options = opts.merge(
        :operation => :"XRPRippleApi.get_xrp__ripple_address_details",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: XRPRippleApi#get_xrp__ripple_address_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get XRP (Ripple) Block Details By Block Hash
    # Through this endpoint customers can obtain basic information about a given XRP block (a block on the XRP blockchain), specifically by using the `hash` parameter. These block details could include the hash of the specific, the previous and the next block, the number of included transactions, etc.     Since XRP is a different blockchain than Bitcoin and Ethereum, it isn't unified.
    # @param network [String] Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;,  are test networks.
    # @param block_hash [String] Represents the hash of the block, which is its unique identifier. It represents a cryptographic digital fingerprint made by hashing the block header twice through the SHA256 algorithm.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user.
    # @return [GetXRPRippleBlockDetailsByBlockHashR]
    def get_xrp__ripple_block_details_by_block_hash(network, block_hash, opts = {})
      data, _status_code, _headers = get_xrp__ripple_block_details_by_block_hash_with_http_info(network, block_hash, opts)
      data
    end

    # Get XRP (Ripple) Block Details By Block Hash
    # Through this endpoint customers can obtain basic information about a given XRP block (a block on the XRP blockchain), specifically by using the &#x60;hash&#x60; parameter. These block details could include the hash of the specific, the previous and the next block, the number of included transactions, etc.     Since XRP is a different blockchain than Bitcoin and Ethereum, it isn&#39;t unified.
    # @param network [String] Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;,  are test networks.
    # @param block_hash [String] Represents the hash of the block, which is its unique identifier. It represents a cryptographic digital fingerprint made by hashing the block header twice through the SHA256 algorithm.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user.
    # @return [Array<(GetXRPRippleBlockDetailsByBlockHashR, Integer, Hash)>] GetXRPRippleBlockDetailsByBlockHashR data, response status code and response headers
    def get_xrp__ripple_block_details_by_block_hash_with_http_info(network, block_hash, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: XRPRippleApi.get_xrp__ripple_block_details_by_block_hash ...'
      end
      # verify the required parameter 'network' is set
      if @api_client.config.client_side_validation && network.nil?
        fail ArgumentError, "Missing the required parameter 'network' when calling XRPRippleApi.get_xrp__ripple_block_details_by_block_hash"
      end
      # verify enum value
      allowable_values = ["mainnet", "testnet"]
      if @api_client.config.client_side_validation && !allowable_values.include?(network)
        fail ArgumentError, "invalid value for \"network\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'block_hash' is set
      if @api_client.config.client_side_validation && block_hash.nil?
        fail ArgumentError, "Missing the required parameter 'block_hash' when calling XRPRippleApi.get_xrp__ripple_block_details_by_block_hash"
      end
      # resource path
      local_var_path = '/blockchain-data/xrp-specific/{network}/blocks/hash/{blockHash}'.sub('{' + 'network' + '}', CGI.escape(network.to_s)).sub('{' + 'blockHash' + '}', CGI.escape(block_hash.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'context'] = opts[:'context'] if !opts[:'context'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetXRPRippleBlockDetailsByBlockHashR'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey']

      new_options = opts.merge(
        :operation => :"XRPRippleApi.get_xrp__ripple_block_details_by_block_hash",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: XRPRippleApi#get_xrp__ripple_block_details_by_block_hash\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get XRP (Ripple) Block Details By Block Height
    # Through this endpoint customers can obtain basic information about a given XRP block (a block on the XRP blockchain), specifically by using the `height` parameter. These block details could include the hash of the specific, the previous and the next block, its transactions count, etc.    Since XRP is a different blockchain than Bitcoin and Ethereum, it isn't unified.
    # @param network [String] Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;,  are test networks.
    # @param block_height [String] Represents the number of blocks in the blockchain preceding this specific block. Block numbers have no gaps. A blockchain usually starts with block 0 called the \&quot;Genesis block\&quot;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user.
    # @return [GetXRPRippleBlockDetailsByBlockHeightR]
    def get_xrp__ripple_block_details_by_block_height(network, block_height, opts = {})
      data, _status_code, _headers = get_xrp__ripple_block_details_by_block_height_with_http_info(network, block_height, opts)
      data
    end

    # Get XRP (Ripple) Block Details By Block Height
    # Through this endpoint customers can obtain basic information about a given XRP block (a block on the XRP blockchain), specifically by using the &#x60;height&#x60; parameter. These block details could include the hash of the specific, the previous and the next block, its transactions count, etc.    Since XRP is a different blockchain than Bitcoin and Ethereum, it isn&#39;t unified.
    # @param network [String] Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;,  are test networks.
    # @param block_height [String] Represents the number of blocks in the blockchain preceding this specific block. Block numbers have no gaps. A blockchain usually starts with block 0 called the \&quot;Genesis block\&quot;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user.
    # @return [Array<(GetXRPRippleBlockDetailsByBlockHeightR, Integer, Hash)>] GetXRPRippleBlockDetailsByBlockHeightR data, response status code and response headers
    def get_xrp__ripple_block_details_by_block_height_with_http_info(network, block_height, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: XRPRippleApi.get_xrp__ripple_block_details_by_block_height ...'
      end
      # verify the required parameter 'network' is set
      if @api_client.config.client_side_validation && network.nil?
        fail ArgumentError, "Missing the required parameter 'network' when calling XRPRippleApi.get_xrp__ripple_block_details_by_block_height"
      end
      # verify enum value
      allowable_values = ["mainnet", "testnet"]
      if @api_client.config.client_side_validation && !allowable_values.include?(network)
        fail ArgumentError, "invalid value for \"network\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'block_height' is set
      if @api_client.config.client_side_validation && block_height.nil?
        fail ArgumentError, "Missing the required parameter 'block_height' when calling XRPRippleApi.get_xrp__ripple_block_details_by_block_height"
      end
      # resource path
      local_var_path = '/blockchain-data/xrp-specific/{network}/blocks/height/{blockHeight}'.sub('{' + 'network' + '}', CGI.escape(network.to_s)).sub('{' + 'blockHeight' + '}', CGI.escape(block_height.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'context'] = opts[:'context'] if !opts[:'context'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetXRPRippleBlockDetailsByBlockHeightR'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey']

      new_options = opts.merge(
        :operation => :"XRPRippleApi.get_xrp__ripple_block_details_by_block_height",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: XRPRippleApi#get_xrp__ripple_block_details_by_block_height\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get XRP (Ripple) Transaction Details By Transaction ID
    # Through this endpoint customers can obtain details about a XRP transaction by the transaction's unique identifier.     Since XRP is a different blockchain than Bitcoin and Ethereum, it isn't unified.
    # @param network [String] Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot;, \&quot;rinkeby\&quot; are test networks.
    # @param transaction_hash [String] Represents the same as &#x60;transactionId&#x60; for account-based protocols like Ethereum, while it could be different in UTXO-based protocols like Bitcoin. E.g., in UTXO-based protocols &#x60;hash&#x60; is different from &#x60;transactionId&#x60; for SegWit transactions.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user.
    # @return [GetXRPRippleTransactionDetailsByTransactionIDR]
    def get_xrp__ripple_transaction_details_by_transaction_id(network, transaction_hash, opts = {})
      data, _status_code, _headers = get_xrp__ripple_transaction_details_by_transaction_id_with_http_info(network, transaction_hash, opts)
      data
    end

    # Get XRP (Ripple) Transaction Details By Transaction ID
    # Through this endpoint customers can obtain details about a XRP transaction by the transaction&#39;s unique identifier.     Since XRP is a different blockchain than Bitcoin and Ethereum, it isn&#39;t unified.
    # @param network [String] Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot;, \&quot;rinkeby\&quot; are test networks.
    # @param transaction_hash [String] Represents the same as &#x60;transactionId&#x60; for account-based protocols like Ethereum, while it could be different in UTXO-based protocols like Bitcoin. E.g., in UTXO-based protocols &#x60;hash&#x60; is different from &#x60;transactionId&#x60; for SegWit transactions.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user.
    # @return [Array<(GetXRPRippleTransactionDetailsByTransactionIDR, Integer, Hash)>] GetXRPRippleTransactionDetailsByTransactionIDR data, response status code and response headers
    def get_xrp__ripple_transaction_details_by_transaction_id_with_http_info(network, transaction_hash, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: XRPRippleApi.get_xrp__ripple_transaction_details_by_transaction_id ...'
      end
      # verify the required parameter 'network' is set
      if @api_client.config.client_side_validation && network.nil?
        fail ArgumentError, "Missing the required parameter 'network' when calling XRPRippleApi.get_xrp__ripple_transaction_details_by_transaction_id"
      end
      # verify enum value
      allowable_values = ["mainnet", "testnet"]
      if @api_client.config.client_side_validation && !allowable_values.include?(network)
        fail ArgumentError, "invalid value for \"network\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'transaction_hash' is set
      if @api_client.config.client_side_validation && transaction_hash.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_hash' when calling XRPRippleApi.get_xrp__ripple_transaction_details_by_transaction_id"
      end
      # resource path
      local_var_path = '/blockchain-data/xrp-specific/{network}/transactions/{transactionHash}'.sub('{' + 'network' + '}', CGI.escape(network.to_s)).sub('{' + 'transactionHash' + '}', CGI.escape(transaction_hash.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'context'] = opts[:'context'] if !opts[:'context'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetXRPRippleTransactionDetailsByTransactionIDR'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey']

      new_options = opts.merge(
        :operation => :"XRPRippleApi.get_xrp__ripple_transaction_details_by_transaction_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: XRPRippleApi#get_xrp__ripple_transaction_details_by_transaction_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List XRP (Ripple) Transactions by Address
    # This endpoint will list XRP transactions by a attribute `address`. The transactions listed will detail additional information such as hash, height, time of creation in Unix timestamp, etc.    Since XRP is a different blockchain than Bitcoin and Ethereum, it isn't unified.    {note}Please note that listing data from the same type will apply pagination on the results.{/note}
    # @param network [String] Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;,  are test networks.
    # @param address [String] Represents the public address, which is a compressed and shortened form of a public key.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user.
    # @option opts [Integer] :limit Defines how many items should be returned in the response per page basis. (default to 50)
    # @option opts [Integer] :offset The starting index of the response items, i.e. where the response should start listing the returned items. (default to 0)
    # @option opts [String] :transaction_type 
    # @return [ListXRPRippleTransactionsByAddressR]
    def list_xrp__ripple_transactions_by_address(network, address, opts = {})
      data, _status_code, _headers = list_xrp__ripple_transactions_by_address_with_http_info(network, address, opts)
      data
    end

    # List XRP (Ripple) Transactions by Address
    # This endpoint will list XRP transactions by a attribute &#x60;address&#x60;. The transactions listed will detail additional information such as hash, height, time of creation in Unix timestamp, etc.    Since XRP is a different blockchain than Bitcoin and Ethereum, it isn&#39;t unified.    {note}Please note that listing data from the same type will apply pagination on the results.{/note}
    # @param network [String] Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;,  are test networks.
    # @param address [String] Represents the public address, which is a compressed and shortened form of a public key.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user.
    # @option opts [Integer] :limit Defines how many items should be returned in the response per page basis.
    # @option opts [Integer] :offset The starting index of the response items, i.e. where the response should start listing the returned items.
    # @option opts [String] :transaction_type 
    # @return [Array<(ListXRPRippleTransactionsByAddressR, Integer, Hash)>] ListXRPRippleTransactionsByAddressR data, response status code and response headers
    def list_xrp__ripple_transactions_by_address_with_http_info(network, address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: XRPRippleApi.list_xrp__ripple_transactions_by_address ...'
      end
      # verify the required parameter 'network' is set
      if @api_client.config.client_side_validation && network.nil?
        fail ArgumentError, "Missing the required parameter 'network' when calling XRPRippleApi.list_xrp__ripple_transactions_by_address"
      end
      # verify enum value
      allowable_values = ["mainnet", "testnet"]
      if @api_client.config.client_side_validation && !allowable_values.include?(network)
        fail ArgumentError, "invalid value for \"network\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'address' is set
      if @api_client.config.client_side_validation && address.nil?
        fail ArgumentError, "Missing the required parameter 'address' when calling XRPRippleApi.list_xrp__ripple_transactions_by_address"
      end
      allowable_values = ["account-set", "account-delete", "check-cancel", "check-cash", "check-create", "deposit-preauth", "escrow-cancel", "escrow-create", "escrow-finish", "offer-cancel", "offer-create", "payment", "payment-channel-claim", "payment-channel-create", "payment-channel-fund", "set-regular-key", "signer-list-set", "ticket-create", "trust-set"]
      if @api_client.config.client_side_validation && opts[:'transaction_type'] && !allowable_values.include?(opts[:'transaction_type'])
        fail ArgumentError, "invalid value for \"transaction_type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/blockchain-data/xrp-specific/{network}/addresses/{address}/transactions'.sub('{' + 'network' + '}', CGI.escape(network.to_s)).sub('{' + 'address' + '}', CGI.escape(address.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'context'] = opts[:'context'] if !opts[:'context'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'transactionType'] = opts[:'transaction_type'] if !opts[:'transaction_type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListXRPRippleTransactionsByAddressR'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey']

      new_options = opts.merge(
        :operation => :"XRPRippleApi.list_xrp__ripple_transactions_by_address",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: XRPRippleApi#list_xrp__ripple_transactions_by_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List XRP (Ripple) Transactions By Block Hash
    # This endpoint will list transactions by an attribute `blockHash`. The transactions listed will detail additional information such as hash, addresses, time of creation in Unix timestamp, etc.    Since XRP is a different blockchain than Bitcoin and Ethereum, it isn't unified.    {note}Please note that listing data from the same type will apply pagination on the results.{/note}
    # @param network [String] Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot;, \&quot;rinkeby\&quot; are test networks.
    # @param block_hash [String] Represents the hash of the block, which is its unique identifier. It represents a cryptographic digital fingerprint made by hashing the block header twice through the SHA256 algorithm.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user.
    # @option opts [Integer] :limit Defines how many items should be returned in the response per page basis. (default to 50)
    # @option opts [Integer] :offset The starting index of the response items, i.e. where the response should start listing the returned items. (default to 0)
    # @return [ListXRPRippleTransactionsByBlockHashR]
    def list_xrp__ripple_transactions_by_block_hash(network, block_hash, opts = {})
      data, _status_code, _headers = list_xrp__ripple_transactions_by_block_hash_with_http_info(network, block_hash, opts)
      data
    end

    # List XRP (Ripple) Transactions By Block Hash
    # This endpoint will list transactions by an attribute &#x60;blockHash&#x60;. The transactions listed will detail additional information such as hash, addresses, time of creation in Unix timestamp, etc.    Since XRP is a different blockchain than Bitcoin and Ethereum, it isn&#39;t unified.    {note}Please note that listing data from the same type will apply pagination on the results.{/note}
    # @param network [String] Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot;, \&quot;rinkeby\&quot; are test networks.
    # @param block_hash [String] Represents the hash of the block, which is its unique identifier. It represents a cryptographic digital fingerprint made by hashing the block header twice through the SHA256 algorithm.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user.
    # @option opts [Integer] :limit Defines how many items should be returned in the response per page basis.
    # @option opts [Integer] :offset The starting index of the response items, i.e. where the response should start listing the returned items.
    # @return [Array<(ListXRPRippleTransactionsByBlockHashR, Integer, Hash)>] ListXRPRippleTransactionsByBlockHashR data, response status code and response headers
    def list_xrp__ripple_transactions_by_block_hash_with_http_info(network, block_hash, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: XRPRippleApi.list_xrp__ripple_transactions_by_block_hash ...'
      end
      # verify the required parameter 'network' is set
      if @api_client.config.client_side_validation && network.nil?
        fail ArgumentError, "Missing the required parameter 'network' when calling XRPRippleApi.list_xrp__ripple_transactions_by_block_hash"
      end
      # verify enum value
      allowable_values = ["mainnet", "testnet"]
      if @api_client.config.client_side_validation && !allowable_values.include?(network)
        fail ArgumentError, "invalid value for \"network\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'block_hash' is set
      if @api_client.config.client_side_validation && block_hash.nil?
        fail ArgumentError, "Missing the required parameter 'block_hash' when calling XRPRippleApi.list_xrp__ripple_transactions_by_block_hash"
      end
      # resource path
      local_var_path = '/blockchain-data/xrp-specific/{network}/blocks/hash/{blockHash}/transactions'.sub('{' + 'network' + '}', CGI.escape(network.to_s)).sub('{' + 'blockHash' + '}', CGI.escape(block_hash.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'context'] = opts[:'context'] if !opts[:'context'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListXRPRippleTransactionsByBlockHashR'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey']

      new_options = opts.merge(
        :operation => :"XRPRippleApi.list_xrp__ripple_transactions_by_block_hash",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: XRPRippleApi#list_xrp__ripple_transactions_by_block_hash\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List XRP (Ripple) Transactions By Block Height
    # This endpoint will list transactions by an attribute `blockHeight`. The transactions listed will detail additional information such as hash, addresses, time of creation in Unix timestamp, etc.    Since XRP is a different blockchain than Bitcoin and Ethereum, it isn't unified.    {note}Please note that listing data from the same type will apply pagination on the results.{/note}
    # @param network [String] Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot;, \&quot;rinkeby\&quot; are test networks.
    # @param block_height [Integer] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user.
    # @option opts [Integer] :limit Defines how many items should be returned in the response per page basis. (default to 50)
    # @option opts [Integer] :offset The starting index of the response items, i.e. where the response should start listing the returned items. (default to 0)
    # @return [ListXRPRippleTransactionsByBlockHeightR]
    def list_xrp__ripple_transactions_by_block_height(network, block_height, opts = {})
      data, _status_code, _headers = list_xrp__ripple_transactions_by_block_height_with_http_info(network, block_height, opts)
      data
    end

    # List XRP (Ripple) Transactions By Block Height
    # This endpoint will list transactions by an attribute &#x60;blockHeight&#x60;. The transactions listed will detail additional information such as hash, addresses, time of creation in Unix timestamp, etc.    Since XRP is a different blockchain than Bitcoin and Ethereum, it isn&#39;t unified.    {note}Please note that listing data from the same type will apply pagination on the results.{/note}
    # @param network [String] Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot;, \&quot;rinkeby\&quot; are test networks.
    # @param block_height [Integer] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user.
    # @option opts [Integer] :limit Defines how many items should be returned in the response per page basis.
    # @option opts [Integer] :offset The starting index of the response items, i.e. where the response should start listing the returned items.
    # @return [Array<(ListXRPRippleTransactionsByBlockHeightR, Integer, Hash)>] ListXRPRippleTransactionsByBlockHeightR data, response status code and response headers
    def list_xrp__ripple_transactions_by_block_height_with_http_info(network, block_height, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: XRPRippleApi.list_xrp__ripple_transactions_by_block_height ...'
      end
      # verify the required parameter 'network' is set
      if @api_client.config.client_side_validation && network.nil?
        fail ArgumentError, "Missing the required parameter 'network' when calling XRPRippleApi.list_xrp__ripple_transactions_by_block_height"
      end
      # verify enum value
      allowable_values = ["mainnet", "testnet"]
      if @api_client.config.client_side_validation && !allowable_values.include?(network)
        fail ArgumentError, "invalid value for \"network\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'block_height' is set
      if @api_client.config.client_side_validation && block_height.nil?
        fail ArgumentError, "Missing the required parameter 'block_height' when calling XRPRippleApi.list_xrp__ripple_transactions_by_block_height"
      end
      # resource path
      local_var_path = '/blockchain-data/xrp-specific/{network}/blocks/height/{blockHeight}/transactions'.sub('{' + 'network' + '}', CGI.escape(network.to_s)).sub('{' + 'blockHeight' + '}', CGI.escape(block_height.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'context'] = opts[:'context'] if !opts[:'context'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListXRPRippleTransactionsByBlockHeightR'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey']

      new_options = opts.merge(
        :operation => :"XRPRippleApi.list_xrp__ripple_transactions_by_block_height",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: XRPRippleApi#list_xrp__ripple_transactions_by_block_height\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
